# Some of my Git aliases! A lot of people have their own, these aren't
# particularly special, just some that I find useful. Thanks for github.com/dnl
# for the very useful, albeit hacky `git a`. Neither of us are bash programmers,
# so if you run into issues or can find better ways of doing things, I'd love to
# learn!

# Add to your ~/.gitconfig file, or create one if you don't have it.
# You should only have [alias] written once.

[alias]
  # add all files (including new files), interactively
  # Has caused me some trouble with files with random filenames. If you get
  # weird errors messages, just git reset and/or stage things manually. If you
  # can improve this, please let https://github.com/michaeldawson or
  # https://github.com/dnl know!
  a = "!git trackuntracked && git add -p && git untracknewblank"

  # a shorter, pretty log that you run all the time
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate

  # pretty log the commits in my branch
  lsb = !git ls master..HEAD

  # master upâ€™, move to master, pull, then move back
  mup = !git checkout master && git pull && git checkout -

  # master up and then rebase on master - equivalent of 'git pull', but for rebasing
  mupr = !git mup && git rebase master

  # compare my branch to master in github
  # You'll need to install 'hub' first, try `brew install hub` on mac
  compare = !hub compare

  # list all touched files in my branch
  tfb = !git diff master..HEAD --name-only

  # undo the last commit, but leave changes
  uncommit = reset HEAD^

  # delete local branches that have been merged
  purge = "!git checkout master && git pull && git branch --merged | grep -Ev 'master' | xargs -n 1 git branch -d"

  # get changes that have been force pushed
  hard-pull = "!git fetch && git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)"

  # reset all changes to files back to the last commit
  clear = !git add . && git reset --hard

  # rebase and squash fixup commits on master
  rsm = rebase -i --autosquash master

  # You'll need these two for `git a` to work.
  # Super duper hacky!! Look the other way....
  trackuntracked = "!git status --untracked=all --porcelain | grep -e '^??' | colrm 1 3 | xargs git add -N"
  untracknewblank = "!git diff --cached --numstat | grep -E '^0\t0\t' | colrm 1 16 | xargs git reset | true"

  # Show filenames of deleted files
  deleted = "!git lsb --find-renames --diff-filter=D --summary"

  # Add new changes to files that are already staged
  add-staged = "!git diff --name-only --cached | xargs git add"

  # Show all aliases that are configured
  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

  # Shorthand if you run this often
  cf = commit --fixup

  # Clear all uncommitted changes. Dangerous as you will lose work if you're not careful.
  clear = !git add . && git reset --hard

  # List all files touched in this branch
  tfb = !git diff master..HEAD --name-only
